{"version":3,"sources":["App/components/MainCard.js","component/Transactions/Order.jsx"],"names":["MainCard","state","isOption","props","fullCard","collapseCard","loadCard","cardRemove","cardReloadHandler","setState","setInterval","cardRemoveHandler","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","this","className","alignRight","Toggle","id","Menu","as","Item","onClick","prevState","href","DEMO","BLANK_LINK","Header","Title","title","position","top","left","right","width","windowWidth","height","windowHeight","join","style","in","Body","children","Component","Order","OnClearForm","jRegistration","onLoadPanelHiding","message","type","LoadPanelVisible","notify","displayTime","at","offset","OnListClickEvent","ListViewing","jlOrder","status","value","FormRef","React","createRef","config","method","url","APIURl","URL","headers","Authorization","localStorage","getItem","serverRequest","axios","then","response","data","success","ReCreateOrder","console","log","map","order","cart","items","cartItem","product","images","push","createdAt","name","description","price","discount","qty","image","length","imageUrl","_id","error","catch","cellData","src","ref","GridRef","dataSource","keyExpr","showBorders","allowSearch","dataField","caption","editorType","dataType","groupIndex","cellRender","renderGridCell","editorOptions","maxLength","format","valueExpr","displayExpr","column","summaryType","displayFormat","showInGroupFooter","shadingColor","onHiding","visible","showIndicator","shading","showPane","closeOnOutsideClick","current","instance"],"mappings":"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","file":"static/js/16.184def9c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Dropdown, Card, Collapse } from \"react-bootstrap\";\nimport windowSize from \"react-window-size\";\n\nimport Aux from \"../../hoc/_Aux\";\nimport DEMO from \"../../store/constant\";\n\nclass MainCard extends Component {\n  state = {\n    isOption: this.props.isOption,\n    fullCard: false,\n    collapseCard: false,\n    loadCard: false,\n    cardRemove: false,\n  };\n\n  cardReloadHandler = () => {\n    this.setState({ loadCard: true });\n    setInterval(() => {\n      this.setState({ loadCard: false });\n    }, 3000);\n  };\n\n  cardRemoveHandler = () => {\n    this.setState({ cardRemove: true });\n  };\n\n  render() {\n    let fullScreenStyle, loader, cardHeaderRight, cardHeader;\n    let card = \"\";\n    let cardClass = [];\n\n    if (this.state.isOption) {\n      cardHeaderRight = (\n        <div className=\"card-header-right\">\n          <Dropdown alignRight={true} className=\"btn-group card-option\">\n            <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\n              <i className=\"feather icon-more-horizontal\" />\n            </Dropdown.Toggle>\n            <Dropdown.Menu as=\"ul\" className=\"list-unstyled card-option\">\n              <Dropdown.Item\n                as=\"li\"\n                className=\"dropdown-item\"\n                onClick={() => {\n                  this.setState((prevState) => {\n                    return { fullCard: !prevState.fullCard };\n                  });\n                }}\n              >\n                <i\n                  className={\n                    this.state.fullCard\n                      ? \"feather icon-minimize\"\n                      : \"feather icon-maximize\"\n                  }\n                />\n                <a href={DEMO.BLANK_LINK}>\n                  {\" \"}\n                  {this.state.fullCard ? \"Restore\" : \"Maximize\"}{\" \"}\n                </a>\n              </Dropdown.Item>\n              <Dropdown.Item\n                as=\"li\"\n                className=\"dropdown-item\"\n                onClick={() => {\n                  this.setState((prevState) => {\n                    return { collapseCard: !prevState.collapseCard };\n                  });\n                }}\n              >\n                <i\n                  className={\n                    this.state.collapseCard\n                      ? \"feather icon-plus\"\n                      : \"feather icon-minus\"\n                  }\n                />\n                <a href={DEMO.BLANK_LINK}>\n                  {\" \"}\n                  {this.state.collapseCard ? \"Expand\" : \"Collapse\"}{\" \"}\n                </a>\n              </Dropdown.Item>\n              <Dropdown.Item\n                as=\"li\"\n                className=\"dropdown-item\"\n                onClick={this.cardReloadHandler}\n              >\n                <i className=\"feather icon-refresh-cw\" />\n                <a href={DEMO.BLANK_LINK}> Reload </a>\n              </Dropdown.Item>\n              <Dropdown.Item\n                as=\"li\"\n                className=\"dropdown-item\"\n                onClick={this.cardRemoveHandler}\n              >\n                <i className=\"feather icon-trash\" />\n                <a href={DEMO.BLANK_LINK}> Remove </a>\n              </Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n      );\n    }\n\n    cardHeader = (\n      <Card.Header>\n        <Card.Title as=\"h5\">{this.props.title}</Card.Title>\n        {cardHeaderRight}\n      </Card.Header>\n    );\n\n    if (this.state.fullCard) {\n      cardClass = [...cardClass, \"full-card\"];\n      fullScreenStyle = {\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        right: 0,\n        width: this.props.windowWidth,\n        height: this.props.windowHeight,\n      };\n    }\n\n    if (this.state.loadCard) {\n      cardClass = [...cardClass, \"card-load\"];\n      loader = (\n        <div className=\"card-loader\">\n          <i className=\"pct-loader1 anim-rotate\" />\n        </div>\n      );\n    }\n\n    if (this.state.cardRemove) {\n      cardClass = [...cardClass, \"d-none\"];\n    }\n\n    if (this.props.cardClass) {\n      cardClass = [...cardClass, this.props.cardClass];\n    }\n\n    card = (\n      <Card className={cardClass.join(\" \")} style={fullScreenStyle}>\n        {cardHeader}\n        <Collapse in={!this.state.collapseCard}>\n          <div>\n            <Card.Body>{this.props.children}</Card.Body>\n          </div>\n        </Collapse>\n        {loader}\n      </Card>\n    );\n\n    return <Aux>{card}</Aux>;\n  }\n}\n\nexport default MainCard;\n","import React, { Component } from \"react\";\nimport Aux from \"../../hoc/_Aux\";\nimport axios from \"axios\";\nimport Form, { Label, Item, RequiredRule } from \"devextreme-react/form\";\nimport \"devextreme-react/text-area\";\nimport Card from \"../../App/components/MainCard\";\nimport { Button, Navbar, Dropdown, DropdownButton } from \"react-bootstrap\";\nimport { LoadPanel } from \"devextreme-react/load-panel\";\nimport Swal from \"sweetalert2\";\nimport notify from \"devextreme/ui/notify\";\nimport APIURl from \"../../APIConfig\";\nimport DataGrid, {\n  Column,\n  Editing,\n  MasterDetail,\n  Popup,\n  Lookup,\n  Scrolling,\n  Paging,\n  Summary,\n  GroupItem,\n} from \"devextreme-react/data-grid\";\n\nclass Order extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      jlOrder: [],\n    };\n\n    this.status = [\n      {\n        id: 0,\n        value: \"Pending\",\n      },\n      {\n        id: 1,\n        value: \"Accept\",\n      },\n      {\n        id: 3,\n        value: \"Processing\",\n      },\n      {\n        id: 4,\n        value: \"Shipping\",\n      },\n      {\n        id: 5,\n        value: \"Deliverd\",\n      },\n    ];\n    this.FormRef = React.createRef();\n  }\n\n  componentDidMount() {\n    var config = {\n      method: \"get\",\n      url: `${APIURl.URL}order/user`,\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"accessToken\") + \"\",\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    this.serverRequest = axios(config)\n      .then((response) => {\n        if (response.data.success) {\n          let ReCreateOrder = [];\n\n          console.log(\"this.response.data.data\", response.data);\n          response.data.data.map((order) => {\n            order.cart.items.map((cartItem) => {\n              console.log(cartItem.product.images);\n              ReCreateOrder.push({\n                createdAt: order.createdAt,\n                name: cartItem.product.name,\n                description: cartItem.product.description,\n                price: cartItem.product.price,\n                discount: cartItem.product.discount,\n                qty: cartItem.qty,\n                image:\n                  cartItem.product.images.length > 0\n                    ? cartItem.product.images[0].imageUrl\n                    : \"\",\n                _id: order._id,\n                status: order.status,\n              });\n            });\n          });\n\n          console.log(\"222222222\", ReCreateOrder);\n          this.setState({ jlOrder: ReCreateOrder });\n        } else {\n          this.onLoadPanelHiding(\n            response.data.error == null\n              ? response.data.message\n              : response.data.error,\n            \"error\"\n          );\n        }\n\n        console.log(\"-----------------------\", this.state);\n        //this.OnListClickEvent();\n      })\n      .catch((error) => {\n        this.onLoadPanelHiding(\"Error\", \"error\");\n        console.log(error);\n      });\n  }\n\n  get FormLayout() {\n    return this.FormRef.current.instance;\n  }\n\n  OnClearForm = () => {\n    this.setState({\n      jRegistration: {},\n    });\n  };\n\n  onLoadPanelHiding = (message, type) => {\n    this.setState({\n      LoadPanelVisible: false,\n    });\n\n    notify({\n      message: message,\n      type: type,\n      displayTime: 3000,\n      position: { at: \"top right\", offset: \"50\" },\n    });\n  };\n\n  OnListClickEvent = () => {\n    this.setState({ ListViewing: !this.state.ListViewing }, () => {});\n  };\n\n  renderGridCell(cellData) {\n    console.log(\"celldate\", cellData.value);\n    return (\n      <div>\n        <img\n          style={{ width: \"100px\", height: \"100px\" }}\n          src={cellData.value}\n        ></img>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Aux>\n        <Card title=\"Order Status\">\n          <DataGrid\n            id=\"grid-subject\"\n            ref={this.GridRef}\n            dataSource={this.state.jlOrder}\n            keyExpr=\"_id\"\n            showBorders={true}\n            allowSearch={true}\n          >\n            <Column\n              dataField=\"createdAt\"\n              caption=\"Create Date\"\n              editorType={{\n                dataType: \"date\",\n              }}\n              groupIndex={0}\n            ></Column>\n            <Column\n              dataField=\"image\"\n              width={100}\n              cellRender={this.renderGridCell}\n            />\n            <Column dataField=\"name\" caption=\"Item Name\"></Column>\n            <Column dataField=\"description\" caption=\"Item Description\"></Column>\n            <Column\n              dataField=\"qty\"\n              caption=\"Item Qty\"\n              editorOptions={{\n                dataType: \"number\",\n                maxLength: 50,\n                format: \"#,##0.00\",\n              }}\n            ></Column>\n            <Column\n              dataField=\"discount\"\n              caption=\"Discount\"\n              editorOptions={{\n                dataType: \"number\",\n                maxLength: 50,\n                format: \"#,##0.00\",\n              }}\n            ></Column>\n            <Column\n              dataField=\"price\"\n              caption=\"Price\"\n              editorOptions={{\n                dataType: \"number\",\n                maxLength: 50,\n                format: \"#,##0.00\",\n              }}\n            ></Column>\n            <Column dataField=\"status\" caption=\"Order Status\">\n              <Lookup\n                dataSource={this.status}\n                valueExpr=\"id\"\n                displayExpr=\"value\"\n              />\n            </Column>\n\n            <Summary>\n              <GroupItem\n                column=\"price\"\n                summaryType=\"sum\"\n                displayFormat=\"Total: {0}\"\n                showInGroupFooter={true}\n              />\n            </Summary>\n          </DataGrid>\n        </Card>\n\n        <LoadPanel\n          message=\"Processing.... Please, wait...\"\n          shadingColor=\"rgba(0,0,0,0.4)\"\n          onHiding={this.onLoadPanelHiding}\n          visible={this.state.LoadPanelVisible}\n          showIndicator={true}\n          shading={true}\n          showPane={true}\n          closeOnOutsideClick={false}\n          width={500}\n        />\n      </Aux>\n    );\n  }\n}\n\nexport default Order;\n"],"sourceRoot":""}